{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","start","interval","setInterval","setState","seconds","state","isOn","Rest","clearInterval","Stop","num","a","h","Math","floor","m","s","round","String","padStart","this","counter","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAmEeA,E,YAjEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMVC,MAAO,WACL,EAAKC,SAAUC,aAAY,WACzB,EAAKC,SAAS,CACZC,QAAQ,EAAKC,MAAMD,QAAQ,MAG7B,KACF,EAAKD,SAAU,CACbG,MAAK,KAfY,EAmBrBC,KAAM,WACJC,cAAc,EAAKP,UACnB,EAAKE,SAAU,CACbC,QAAQ,KAtBS,EAyBrBK,KAAM,WACJD,cAAc,EAAKP,UACnB,EAAKE,SAAU,CACbG,MAAK,KA1BL,EAAKD,MAAQ,CACXD,QAAQ,EACRE,MAAK,GAJU,E,qEA+BbI,GACN,IAAIC,EAAGD,EAAI,KAGPE,EAAIC,KAAKC,MAAMH,GACfI,EAAGF,KAAKC,MAAY,IAALH,EAAEC,IACjBI,EAAGH,KAAKI,MAAqB,IAAP,IAALN,EAAEC,GAAOG,IAC/B,OACC,6BACA,8BAAOG,OAAON,GAAGO,SAAS,EAAE,GAA5B,MAAmCD,OAAOH,GAAGI,SAAS,EAAE,GAAxD,MAA+DD,OAAOF,GAAGG,SAAS,EAAE,GAApF,Q,+BAME,OAAS,6BACX,8BAAOC,KAAKC,QAAQD,KAAKf,MAAMD,UAGjC,6BACE,uCACA,yCACA,0CAGF,6BACE,4BAAQkB,QAAWF,KAAKf,MAAMC,KAAkBc,KAAKX,KAAhBW,KAAKpB,OAA1C,SACA,4BAAQsB,QAASF,KAAKb,MAAtB,c,GA3DgBgB,aCWEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5f9cb7ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      seconds:0 , \n      isOn:false\n     }\n  }\nstart =()=> {\n  this.interval= setInterval(()=> {\n    this.setState({\n      seconds:this.state.seconds+1\n\n    })\n  },1000)\n  this.setState ({\n    isOn:true\n  })\n}\n\nRest =()=> {\n  clearInterval(this.interval)\n  this.setState ({\n    seconds:0\n  })\n}\nStop =()=> {\n  clearInterval(this.interval)\n  this.setState ({\n    isOn:false\n  })\n}\ncounter(num) {\n  var a =num/3600\n\n\n  var h = Math.floor(a)\n  var m= Math.floor((a-h)*60)\n  var s= Math.round((((a-h)*60)-m)*60)\n return (\n  <div> \n  <span>{String(h).padStart(2,0)} : {String(m).padStart(2,0)} : {String(s).padStart(2,0)} </span>\n</div>\n )\n\n     }\n  render() { \n    return ( <div>\n  <span>{this.counter(this.state.seconds)}</span>\n\n\n<div>\n  <span>Hours</span>\n  <span>Minutes</span>\n  <span>seconds</span>\n\n</div>\n<div>\n  <button onClick ={!this.state.isOn ? this.start:this.Stop}>Start</button>\n  <button onClick={this.Rest}>Rest</button>\n\n</div>\n    </div> );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}